// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import exchangeRate "github.com/vaksi/foreign_currency/internal/exchangeRate"
import mock "github.com/stretchr/testify/mock"
import time "time"

// RepositoryFactory is an autogenerated mock type for the RepositoryFactory type
type RepositoryFactory struct {
	mock.Mock
}

// Store provides a mock function with given fields: _a0
func (_m *RepositoryFactory) Store(_a0 *exchangeRate.ExchangeRate) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*exchangeRate.ExchangeRate) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WhereByDate provides a mock function with given fields: date
func (_m *RepositoryFactory) WhereByDate(date time.Time) ([]*exchangeRate.ExchangeRate, error) {
	ret := _m.Called(date)

	var r0 []*exchangeRate.ExchangeRate
	if rf, ok := ret.Get(0).(func(time.Time) []*exchangeRate.ExchangeRate); ok {
		r0 = rf(date)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*exchangeRate.ExchangeRate)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(time.Time) error); ok {
		r1 = rf(date)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WhereByTrend provides a mock function with given fields: from, to
func (_m *RepositoryFactory) WhereByTrend(from string, to string) ([]*exchangeRate.ExchangeRate, error) {
	ret := _m.Called(from, to)

	var r0 []*exchangeRate.ExchangeRate
	if rf, ok := ret.Get(0).(func(string, string) []*exchangeRate.ExchangeRate); ok {
		r0 = rf(from, to)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*exchangeRate.ExchangeRate)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(from, to)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
